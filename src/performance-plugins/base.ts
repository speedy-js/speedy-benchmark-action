import { BenchmarkConfig, MergeIntersection } from '../types'
import { CategorizedProjects, RushKit, Project } from '../utils'

export interface MetricNumber {
  value: number
  format: 'ms' | 'bytes'
}

// currently we do not support string metrics
export interface MetricString {
  value: string
}

export type Metric = MergeIntersection<{
  /* id under plugin */
  id: string
  /* title of generated metrics, which will be used in benchmark results */
  title?: string
} & (MetricNumber | MetricString)>

export interface PluginBenchmark {
  /* Metrics generated by plugin, multiple metrics can be provided */
  metrics: Metric[]
}

export type PluginBenchmarks = Array<PluginBenchmark | null>

export interface RunSpeedyCtxt {
  /* current testing project */
  pkg: Project
}

export interface RunFixtureCtxt {
  benchmarkConfig: BenchmarkConfig
  tmpBenchmarkDir: string
}

export type PluginSpeedyFinalize = () => {
  title: string
  columns: string[]
  data: string[]
}

abstract class PerformancePluginSpeedy {
  static id: string
  static title: string
  static finalize: PluginSpeedyFinalize
  abstract getPackages(speedyPackages: RushKit): CategorizedProjects
  abstract runEach(project: Project): Promise<PluginBenchmark | void>
}

export type PluginFixtureFinalize = () => void

abstract class PerformancePluginFixture {
  static id: string
  static title: string
  static finalize: PluginFixtureFinalize
  abstract runEach(ctxt: RunFixtureCtxt): Promise<PluginBenchmark | void>
}

export { PerformancePluginFixture, PerformancePluginSpeedy, Project }

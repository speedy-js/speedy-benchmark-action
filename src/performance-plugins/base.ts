import path from 'path'
import fs from 'fs-extra'

import { SpeedyConfig } from '../speedy/utils'
import { BenchmarkConfig, MergeIntersection } from '../types'
import { CategorizedProjects, RushKit, Project, runCommand } from '../utils'

export interface MetricNumber {
  value: number
  format: 'ms' | 'bytes'
}

// Metrics for markdown
export interface MetricString {
  value: string
}

export type Metric = MergeIntersection<{
  /* id under plugin */
  id: string
  /* title of generated metrics, which will be used in benchmark results */
  title?: string
} & (MetricNumber | MetricString)>

export interface PluginBenchmark {
  /* Metrics generated by plugin, multiple metrics can be provided */
  metrics: Metric[]
}

export type PluginBenchmarks = Array<PluginBenchmark | null>

export interface RunSpeedyCtxt {
  /* current testing project */
  pkg: Project
}

export interface RunFixtureCtxt {
  benchmarkConfig: BenchmarkConfig
  tmpBenchmarkDir: string
}

export type PluginSpeedyFinalize = () => {
  title: string
  columns: string[]
  data: string[]
}

abstract class PerformancePluginSpeedy {
  static id: string
  static title: string
  abstract getPackages(speedyPackages: RushKit): CategorizedProjects
  abstract runEach(project: Project): Promise<PluginBenchmark | void>
}

export type PluginFixtureFinalize = () => void

abstract class PerformancePluginFixture {
  static id: string
  static title: string
  abstract runEach(ctxt: RunFixtureCtxt): Promise<PluginBenchmark | void>
  checkFixtureStatus ({ tmpBenchmarkDir }: RunFixtureCtxt) {
    const configPath = path.join(tmpBenchmarkDir, 'speedy.config.ts')

    if (!fs.existsSync(configPath)) {
      throw new Error(`Unable to find speedy config file for package: ${tmpBenchmarkDir}, at ${configPath}`)
    }

    return {
      configPath
    }
  }

  getSpeedyConfig (tmpBenchmarkDir: string, configRelPath?: string) {
    const configPath = path.join(tmpBenchmarkDir, configRelPath || 'speedy.config.ts')

    if (!fs.existsSync(configPath)) {
      throw new Error(`Unable to find speedy config file for package: ${tmpBenchmarkDir}, at ${configPath}`)
    }

    return new SpeedyConfig(configPath)
  }

  runSpeedy (cwd: string, command: 'dev' | 'build' | (string & {}), args: string[] = []) {
    return runCommand(`${cwd}/node_modules/@speedy-js/speedy-core/cli.js`, [command, ...args], {
      cwd: cwd
    })
  }
}

export { PerformancePluginFixture, PerformancePluginSpeedy, Project }
